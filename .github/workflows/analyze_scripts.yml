name: Analyze PowerShell Scripts

on:
  push:
    branches: [ "develop" ]
  pull_request:
    branches: [ "develop" ]

permissions:
  contents: read

jobs:
  build:
    permissions:
      contents: read
    name: Run Analyzer
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up PowerShell
        run: |
          # Install PowerShell
          curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
          curl https://packages.microsoft.com/config/ubuntu/22.04/prod.list | sudo tee /etc/apt/sources.list.d/microsoft-prod.list
          sudo apt-get update
          sudo apt-get install -y powershell

      - name: Install PSScriptAnalyzer
        shell: pwsh
        run: |
          Install-Module -Name PSScriptAnalyzer -Force -Scope CurrentUser

      - name: Analyze .ps1 files
        shell: pwsh
        id: analyze_ps1
        run: |
          # Analyze .ps1 files
          $results = Invoke-ScriptAnalyzer -Path './*.ps1' -Recurse
          
          if ($results.Count -gt 0) {
              Write-Output "Script analysis found issues in .ps1 files:"
              $results | Format-Table | Out-String | Write-Output
              $results | Where-Object { $_.Severity -eq 'Error' } | Set-Content -Path error.log
          } else {
              Write-Output "No issues found in .ps1 files."
          }

      - name: Analyze .psm1 files
        shell: pwsh
        run: |
          # Analyze .psm1 files
          $moduleResults = Invoke-ScriptAnalyzer -Path './*.psm1' -Recurse
          
          if ($moduleResults.Count -gt 0) {
              Write-Output "Script analysis found issues in .psm1 files:"
              $moduleResults | Format-Table | Out-String | Write-Output
              $moduleResults | Where-Object { $_.Severity -eq 'Error' } | Set-Content -Path error.log
          } else {
              Write-Output "No issues found in .psm1 files."
          }

      - name: Display Errors
        shell: pwsh
        run: |
          if (Test-Path error.log) {
              $errors = Get-Content error.log
              if ($errors) {
                  Write-Output "Errors found:"
                  $errors | Write-Output
                  exit 1
              }
          }
